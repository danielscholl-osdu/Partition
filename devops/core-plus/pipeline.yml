gc-containerize-gitlab:core-plus:
  stage: containerize
  needs: ["compile-and-unit-test", "download_plugins"]
  tags: ["osdu-small"]
  image: docker:19.03
  cache: {}
  variables:
    BUILD_ARGS: "--build-arg PORT=$GC_PORT"
    BUILD_PATH: "devops/core-plus/build/Dockerfile"
    IMAGE_NAME: "partition-core-plus"
  script:
    - !reference [.gc_set_image_name, script]
    - docker build $EXTRA_TAG -f $BUILD_PATH $BUILD_ARGS .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: "$PROTECTED == '1'"
      when: on_success

gc-baremetal-test:
  tags: [ "osdu-medium" ]
  extends:
    - .maven
  stage: integration
  needs: [ "compile-and-unit-test", "gc-containerize-gitlab:core-plus" ]
  retry: 1
  services:
    - name: postgres
      command:
        ["postgres", "-c", "shared_buffers=256MB", "-c", "max_connections=200"]
    - name: $CI_REGISTRY_IMAGE/partition-core-plus:$CI_COMMIT_SHORT_SHA
      alias: partition-service-image
  variables:
    PARTITION_POSTGRESQL_DB_NAME: partition_db  #Used from bootstrapping script
    PARTITION_POSTGRESQL_USERNAME: usr_partition_pg #Used from bootstrapping script
    PARTITION_POSTGRESQL_PASSWORD: partition_pg #Used from bootstrapping script
    POSTGRESQL_PORT: 5432 #used from the docker script
    POSTGRESQL_HOST: postgres #used from the docker script
    POSTGRESQL_USERNAME: postgres #used from the docker script
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD #used to start the postgres service alongside the runner
    POSTGRESQL_DATABASE: postgres #default postgres database for scripts to connect
    POSTGRESQL_PASSWORD: $POSTGRES_PASSWORD #password for above db
    TEST_OPENID_PROVIDER_CLIENT_ID: integration-tester #integration testing
    TEST_OPENID_PROVIDER_CLIENT_SECRET: $GC_OPENID_PROVIDER_CLIENT_SECRET #integration testing
    TEST_NO_ACCESS_OPENID_PROVIDER_CLIENT_ID: no-access-tester #integration testing
    TEST_NO_ACCESS_OPENID_PROVIDER_CLIENT_SECRET: $GC_NO_ACCESS_OPENID_PROVIDER_CLIENT_SECRET #integration testing
    TEST_OPENID_PROVIDER_URL: https://keycloak.ref.gcp.gnrg-osdu.projects.epam.com/realms/osdu #token provider for testing config, need to change it later
    DATA_PARTITION_ID: test-partition #for default configs
    CUSTOM_PROJECT_NAME: "partition-core-plus"
    #required for integration tests
    CLIENT_TENANT: osdu #int tests
    ENVIRONMENT: dev #if this is not specified, it just assumes that the service is running locally
    PARTITION_BASE_URL: http://partition-service-image:8080/ #url where integration tests are hitting
    #CI_DEBUG_SERVICES: "true" #flag for debugging the services in the runner
    PARTITION_POSTGRES_URL: $PARTITION_POSTGRES_URL
  script:
    - echo "--- Install psql ---"
    - apt-get update && apt-get install -y postgresql-client libpq-dev jq
    - echo "--- Bootstrap tables ---"
    - chmod +x devops/core-plus/test/bootstrap.sh
    - devops/core-plus/test/bootstrap.sh
    - echo "--- Run integration tests ---"
    - >
      $MAVEN_BUILD . test-results.log
      verify -DdisableXmlReport=true
      --file testing/pom.xml
      --projects partition-test-core,partition-test-core-plus
      --update-snapshots
  artifacts:
    when: always
    paths:
      - test-results.log
    expire_in: 1 days
  rules:
    - if: "$PROTECTED == '1'"
      when: on_success

gc-helm-charts-gitlab:core-plus:
  stage: containerize
  tags: ["osdu-small"]
  needs: ["gc-containerize-gitlab:core-plus"]
  image:
    name: alpine/helm:3.11.2
    entrypoint: [""]
  variables:
    IMAGE_NAME: "partition-core-plus"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$GC == "1"'
      when: on_success
  before_script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - !reference [.gc_set_image_name, script]
    - !reference [.gc_substitute_image_in_helm, script]
  script:
    - !reference [.gc_define_app_version, script]
    - helm package $GC_HELM_DEPLOYMENT_DIR -u --version $GC_HELM_PACKAGE_VERSION-$HELM_TAG --app-version $APP_VERSION
    - helm push $GC_HELM_PACKAGE_NAME-$GC_HELM_PACKAGE_VERSION-$HELM_TAG.tgz oci://$CI_REGISTRY_IMAGE/core-plus-helm

gc-baremetal-deploy: #infra deploy for on-prem install
  environment:
    name: GC_Baremetal
  extends: .gc-baremetal-variables
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://iam.googleapis.com/projects/${GC_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GC_POOL_ID}/providers/${GC_PROVIDER_ID}
  tags: ["osdu-small"]
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  stage: deploy
  needs: ["gc-helm-charts-gitlab:core-plus"]
  retry: 1
  variables:
    GC_HELM_NAMESPACE: default
    GC_TENANT: osdu
    # if parameter is not necessary define the GC_HELM_SETS as blank
    GC_HELM_SETS: "--set data.indexerAugmenterEnabled=true"
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL
  script:
    - !reference [.gc_obtain_credentials, script]
    - !reference [.gc_set_image_name, script]
    - !reference [.gc_common_config, script]
    - export PASSWORD=$(</dev/urandom tr -dc _A-Z-a-z-0-9 | head -c10)
    - cd $GC_HELM_ENV_DIR
    - helm dependency update
    - >
      helm upgrade $GC_SERVICE-deploy oci://$CI_REGISTRY_IMAGE/core-plus-helm/$GC_HELM_PACKAGE_NAME
      --version $GC_HELM_PACKAGE_VERSION-$HELM_TAG
      --install
      --create-namespace
      --namespace=$GC_HELM_NAMESPACE
      --wait
      --history-max=3
      --set postgresql.global.postgresql.auth.postgresPassword=$PASSWORD
      --set bootstrap.postgres.image=$CI_REGISTRY_IMAGE/gc-bootstrap-$GC_SERVICE-env:$CI_COMMIT_SHORT_SHA
      --set global.onPremEnabled=true
      --set global.domain=$GC_DOMAIN
      --set data.serviceAccountName=$GC_SERVICE
      --set data.bootstrapServiceAccountName=$GC_BOOTSTRAP_SA
      --set data.logLevel=INFO
      --set data.springProfilesActive=$GC_SPRING_PROFILES_ACTIVE
      --set data.bucketPrefix=$BUCKET_PREFIX
      --set data.dataPartitionId=$GC_TENANT
      --set data.groupId=$GROUP_ID
      --set data.adminUserEmail=$GC_ADMIN_USER_EMAIL
      --set data.airflowComposerEmail=$GC_AIRFLOW_COMPOSER_EMAIL
      --set data.sharedTenantName=$GC_TENANT
      --set opa.data.serviceAccountName=opa
      --set data.bucketName=$GC_POLICY_BUCKET
      --set data.googleCloudProject=$GC_PROJECT
      --set data.subscriberPrivateKeyId=$GC_BAREMETAL_SUBSCRIBER_PRIVATE_KEY_ID
      $GC_HELM_SETS
      $GC_HELM_TIMEOUT
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$GC == "1"'
      when: on_success
