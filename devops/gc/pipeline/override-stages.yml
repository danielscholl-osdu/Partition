variables:
  GC_ENABLE_BOOTSTRAP: "true"
  GC_SERVICE: partition
  GC_VENDOR: gc
  GC_HELM_ENV_DIR: "devops/gc/tests/env"
  ENV_BUILD_PATH: "devops/gc/tests/build/Dockerfile"

gc-containerize-bootstrap-env-gitlab:
  stage: build
  image: docker:19.03.15
  tags: ["osdu-small"]
  services:
    - docker:20.10.7-dind
  variables:
    BUILD_BOOTSTRAP_PATH: "devops/gc/tests/build/Dockerfile"
  script:
    - export EXTRA_DOCKER_TAG=""
    - >
      if [[ "$CI_COMMIT_TAG" != "" ]];
      then EXTRA_DOCKER_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME-env:$CI_COMMIT_TAG";
      elif [[ "$CI_COMMIT_REF_NAME" = "$CI_DEFAULT_BRANCH" ]];
      then EXTRA_DOCKER_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME-env:latest"; fi
    - docker build -t $CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME-env:$CI_COMMIT_SHORT_SHA $EXTRA_DOCKER_TAG -f $BUILD_BOOTSTRAP_PATH .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME-env
  rules:
    - if: "$GC == '1' && $GC_ENABLE_BOOTSTRAP == 'true'"
      when: on_success

gc-deploy: # reuse common deploy job for test deployment
  variables:
    GC_HELM_NAMESPACE: partition-int-test
    GC_HELM_SETS: >-
      --set data.dataPartitionId=test
      --set data.partitionNamespace=partition-test
      --set istio.sidecarInject=false
      --set data.edsEnabled=true
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL

gc-test:
  variables:
    CLIENT_TENANT: test
    PARTITION_BASE_URL: https://test.community.gcp.gnrg-osdu.projects.epam.com/

gc-cleanup-env: # clean-up env after tests
  environment:
    name: Google_Cloud
  stage: cleanup
  extends: .gc-variables
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://iam.googleapis.com/projects/${GC_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GC_POOL_ID}/providers/${GC_PROVIDER_ID}
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  needs: ["gc-test"]
  tags: ["osdu-small"]
  variables:
    PARTITION_NAMESPACE: partition-test
    GC_HELM_NAMESPACE: partition-int-test
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL
    PIP_BREAK_SYSTEM_PACKAGES: 1
  script:
    - !reference [.gc_obtain_credentials, script]
    - !reference [.gc_common_config, script]
    - chmod +x devops/gc/tests/clean_up/clean_up.sh && devops/gc/tests/clean_up/clean_up.sh --all
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$GC == "1"'
      when: always

gc-verified-deploy: # verified deploy after tests
  extends: gc-deploy
  stage: verified-deploy
  needs: ["gc-test"]
  variables:
    GC_HELM_NAMESPACE: default
    GC_TENANT: osdu
    # GC_HELM_SETS is blanked since values from gc-deploy is not compatible
    GC_HELM_SETS: >-
      --set data.edsEnabled=true

# Baremetal jobs
gc-baremetal-deploy-test-env: #infra deploy for on-prem install
  environment:
    name: GC_Baremetal
  extends: .gc-baremetal-variables
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://iam.googleapis.com/projects/${GC_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GC_POOL_ID}/providers/${GC_PROVIDER_ID}
  tags: ["osdu-small"]
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  stage: deploy
  needs: ["gc-containerize-bootstrap-env-gitlab", "compile-and-unit-test"]
  retry: 1
  variables:
    GC_HELM_NAMESPACE: partition-int-test
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL
  script:
    - !reference [.gc_obtain_credentials, script]
    - !reference [.gc_common_config, script]
    - export PASSWORD=$(</dev/urandom tr -dc _A-Z-a-z-0-9 | head -c10)
    - cd $GC_HELM_ENV_DIR
    - helm dependency update
    - >
      helm upgrade $GC_SERVICE-env .
      --install
      --create-namespace
      --namespace=$GC_HELM_NAMESPACE
      --wait
      --history-max=3
      --set postgresql.global.postgresql.auth.postgresPassword=$PASSWORD
      --set bootstrap.postgres.image=$CI_REGISTRY_IMAGE/gc-bootstrap-$GC_SERVICE-env:$CI_COMMIT_SHORT_SHA
      $GC_HELM_TIMEOUT
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$GC == "1"'
      when: on_success

gc-baremetal-deploy: # reuse common deploy job for test deployment
  needs: ["gc-baremetal-deploy-test-env", "gc-containerize-gitlab"]
  variables:
    GC_HELM_NAMESPACE: partition-int-test
    GC_TENANT: test
    GC_HELM_SETS: >-
      --set istio.sidecarInject=false
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL

gc-baremetal-test:
  variables:
    GC_VENDOR: baremetal
    PARTITION_BASE_URL: https://test.ref.gcp.gnrg-osdu.projects.epam.com/

gc-baremetal-cleanup-env: # clean-up env after tests
  environment:
    name: GC_Baremetal
  stage: cleanup
  extends: .gc-baremetal-variables
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://iam.googleapis.com/projects/${GC_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GC_POOL_ID}/providers/${GC_PROVIDER_ID}
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  needs: ["gc-baremetal-test"]
  tags: ["osdu-small"]
  variables:
    PARTITION_NAMESPACE: partition-test
    GC_HELM_NAMESPACE: partition-int-test
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL
  script:
    - !reference [.gc_obtain_credentials, script]
    - !reference [.gc_common_config, script]
    - chmod +x devops/gc/tests/clean_up/clean_up.sh && devops/gc/tests/clean_up/clean_up.sh --cluster
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$GC == "1"'
      when: always

gc-baremetal-verified-deploy: # verified deploy after tests
  extends: gc-baremetal-deploy
  stage: verified-deploy
  needs: ["gc-baremetal-test"]
  variables:
    GC_HELM_NAMESPACE: default
    GC_TENANT: osdu
    # if parameter is not necessary define the GC_HELM_SETS as blank
    GC_HELM_SETS: "--set data.indexerAugmenterEnabled=true"

# Dev2 jobs
gc-dev2-deploy: # reuse common deploy job for test deployment
  variables:
    GC_HELM_NAMESPACE: partition-int-test
    GC_HELM_SETS: >-
      --set data.dataPartitionId=test
      --set data.partitionNamespace=partition-test
      --set istio.sidecarInject=false
      --set data.edsEnabled=true
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL

gc-dev2-test:
  variables:
    CLIENT_TENANT: test
    PARTITION_BASE_URL: https://test.dev2.gcp.gnrg-osdu.projects.epam.com/

gc-dev2-cleanup-env: # clean-up env after tests
  environment:
    name: GC_Dev2
  stage: cleanup
  extends: .gc-dev2-variables
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://iam.googleapis.com/projects/${GC_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GC_POOL_ID}/providers/${GC_PROVIDER_ID}
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  needs: [gc-dev2-test]
  tags: ["osdu-small"]
  variables:
    PARTITION_NAMESPACE: partition-test
    GC_HELM_NAMESPACE: partition-int-test
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL
    PIP_BREAK_SYSTEM_PACKAGES: 1
  script:
    - !reference [.gc_obtain_credentials, script]
    - !reference [.gc_common_config, script]
    - chmod +x devops/gc/tests/clean_up/clean_up.sh && devops/gc/tests/clean_up/clean_up.sh --all
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: always
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: always

gc-dev2-verified-deploy: # verified deploy after tests
  extends: gc-dev2-deploy
  stage: verified-deploy
  needs: ["gc-dev2-test"]
  retry: 1
  variables:
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL
    GC_HELM_NAMESPACE: default
    GC_TENANT: devtwo
    GC_HELM_SETS: >-
      --set data.edsEnabled=true

gc-preship-deploy:
  extends: .gc-preship-variables
  tags: ["osdu-small"]
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  stage: deploy_preship
  needs: ["gc-dev2-verified-deploy", "gc-dev2-test"]
  variables:
    GC_HELM_SETS: >-
      --set data.dataPartitionId=m19
      --set data.edsEnabled=true
